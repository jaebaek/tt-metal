// SPDX-FileCopyrightText: Â© 2023 Tenstorrent Inc.
//
// SPDX-License-Identifier: Apache-2.0

#include <cstdint>

#define REDUCE_OP PoolType::SUM
#define REDUCE_DIM ReduceDim::REDUCE_ROW

#define BCAST_LLKOP EltwiseBinaryType::ELWMUL
#define BCAST_DIM BroadcastType::COL

#include "compute_kernel_api/reduce.h"
#include "compute_kernel_api/bcast.h"
#include "compute_kernel_api/eltwise_binary.h"
#include "compute_kernel_api/layernorm.h"
#include "debug/dprint.h"


ALWI void ACQ() { acquire_dst(tt::DstMode::Half); }
ALWI void REL() { release_dst(tt::DstMode::Half); }


namespace NAMESPACE {
void MAIN {
    uint32_t NCHt = get_arg_val<uint32_t>(0);
    constexpr uint32_t Wt = get_compile_time_arg_val(0);
    constexpr uint32_t blk = get_compile_time_arg_val(1);
    constexpr uint32_t stats_tiles_cols = get_compile_time_arg_val(2);
    constexpr uint32_t do_gamma = get_compile_time_arg_val(3);
    constexpr uint32_t do_beta = get_compile_time_arg_val(4);
    constexpr bool FLOAT32_DTYPE = get_compile_time_arg_val(5) == 1;

    constexpr uint32_t onetile = 1;

    constexpr uint32_t cb_inp = tt::CB::c_in0;
    constexpr uint32_t cb_stats = tt::CB::c_in1;

    constexpr uint32_t cb_eps = tt::CB::c_in4;
    constexpr uint32_t cb_reduce = tt::CB::c_in5;

    constexpr uint32_t cb_out = tt::CB::c_out0;

    constexpr uint32_t cb_stats_reduced = tt::CB::c_intermed0; // [E(x**2), E(x)]
    constexpr uint32_t cb_var_eps = tt::CB::c_intermed3; // var + epsilon (or E(x**2) + epsilon)
    constexpr uint32_t cb_recip_sqrt_var = tt::CB::c_intermed4; // 1/sqrt(var+eps)
    constexpr uint32_t cb_x_normed = tt::CB::c_intermed6; // (x - E(x)) * 1/sqrt(var+eps) or x * 1/sqrt(E(x**2) + eps)

    constexpr uint32_t cb_var = tt::CB::c_intermed2; // E(x**2) - E(x)**2 or E(x**2)
    #ifndef RMSNORM
    // Layernorm-specific CBs
    constexpr uint32_t cb_mean_squared = tt::CB::c_intermed1; // E(x)**2
    constexpr uint32_t cb_x_minus_mean = tt::CB::c_intermed5; // x - E(x)

    constexpr uint32_t cb_norm_x_input = cb_x_minus_mean;
    constexpr uint32_t stats_tile_stride = 2;
    #else
    constexpr uint32_t cb_norm_x_input = cb_inp;
    constexpr uint32_t stats_tile_stride = 1;
    #endif

    // if constexpr (do_gamma)defined FUSE_GAMMA
    constexpr uint32_t cb_gamma = tt::CB::c_in2;
    // #endif
    // #if defined FUSE_BETA
    constexpr uint32_t cb_beta = tt::CB::c_in3;
    // #endif
    // #if defined FUSE_GAMMA and defined FUSE_BETA
    uint32_t cb_times_gamma_out = cb_out;
    if constexpr(do_gamma and do_beta) {
        cb_times_gamma_out = tt::CB::c_intermed7;
    }
    // constexpr uint32_t cb_times_gamma_out = tt::CB::c_intermed7; // gamma * x_normed
    // #else
    // constexpr uint32_t cb_times_gamma_out = cb_out; // gamma * x_normed
    // #endif



    // // Note that the entire W dimension must fit in the intermed0 CB for this kernel to be correct
    // constexpr auto cb_scaler = tt::CB::c_in2; // single tile generated by the reader
    // constexpr auto cb_eps = tt::CB::c_in3; // single tile generated by the reader
    // constexpr auto cb_in = tt::CB::c_in0; // input x or a for fused pre-add (x=a+b)
    // constexpr auto cb_inb = tt::CB::c_in1; // input b for fused pre-add
    // constexpr auto cb_out = tt::CB::c_out0; // output
    // constexpr auto cb_gamma = tt::CB::c_in5;
    // constexpr auto cb_beta = tt::CB::c_in6;
    // #if defined RMSNORM and not defined FUSE_PRE_ADD
    // constexpr uint32_t cb_xmm = cb_in; // x minus mean
    // #else
    // constexpr uint32_t cb_xmm = tt::CB::c_intermed0; // x minus mean
    // #endif
    // constexpr auto cb_ex = tt::CB::c_intermed1; // E[x]
    // constexpr auto cb_ex2 = tt::CB::c_intermed2; // E[(x-E[x])^2]
    // constexpr auto cb_xmm2 = tt::CB::c_intermed3; // xmm^2
    // constexpr auto cb_ex2pe = tt::CB::c_intermed4; // E[(x-E[x])^2]+eps
    // constexpr auto cb_fusion = tt::CB::c_intermed5; // stream gamma/beta
    // constexpr auto scaler0 = 0;
    // #ifdef FUSE_PRE_ADD
    // #ifdef RMSNORM
    // constexpr uint32_t cb_x = cb_xmm;
    // #else
    // constexpr uint32_t cb_x = tt::CB::c_intermed6;
    // #endif
    // #else
    // constexpr uint32_t cb_x = cb_in;
    // #endif


    binary_op_init_common(cb_inp, cb_inp, cb_stats_reduced);

    cb_wait_front(cb_reduce, 1); // comes from the reader
    cb_wait_front(cb_eps, 1); // comes from the reader


    // constexpr uint32_t cb_im_or_out = (do_gamma|do_beta) ? cb_fusion : cb_out;


    for (uint32_t ncht = 0; ncht < NCHt; ncht++) {
        PACK(DPRINT << "COMPUTE: ncht=" << ncht << ENDL());

        constexpr int onetile = 1;
        constexpr int dst0 = 0;

        unpack_reconfig_data_format(cb_stats, cb_reduce);
        pack_reconfig_data_format(cb_stats_reduced);

        /*
         * Reduce stats input.
         * cb_stats = [sum(x0**2), sum(x0), sum(x1**2), sum(x1), ...]
         * RMSNorm packs mean(x**2) into cb_var. Layernorm just uses cb_stats_reduced.
         */
        reduce_init_delta<false>(REDUCE_OP, REDUCE_DIM);
        cb_wait_front(cb_stats, stats_tiles_cols);
        cb_reserve_back(cb_stats_reduced, stats_tile_stride);
        #ifdef RMSNORM
        cb_reserve_back(cb_var, 1);
        #endif
        ACQ();
        // Reduce sum(x**2) first
        for (uint32_t i = 0; i < stats_tiles_cols; i += stats_tile_stride) {
            reduce_tile(cb_stats, cb_reduce, i, 0, 0);
        }
        pack_tile(0, cb_stats_reduced);

        #ifndef RMSNORM
        // Reduce sum(x) next
        for (uint32_t i = 1; i < stats_tiles_cols; i += stats_tile_stride) {
            reduce_tile(cb_stats, cb_reduce, i, 0, 1);
        }
        pack_tile(1, cb_stats_reduced);
        #else
        pack_tile(0, cb_var);
        #endif
        REL();
        cb_push_back(cb_stats_reduced, stats_tile_stride);
        cb_pop_front(cb_stats, stats_tiles_cols);
        #ifdef RMSNORM
        cb_push_back(cb_var, 1);
        #endif

        reduce_revert_delta();

        #ifndef RMSNORM
        /*
         * E[x]**2
         */
        unpack_reconfig_data_format(cb_stats_reduced, cb_stats_reduced);
        pack_reconfig_data_format(cb_mean_squared);
        mul_tiles_init();
        cb_reserve_back(cb_mean_squared, onetile);
        cb_wait_front(cb_stats_reduced, stats_tile_stride);
        ACQ();
        mul_tiles(cb_stats_reduced, cb_stats_reduced, 1, 1, 0);
        pack_tile(0, cb_mean_squared);
        REL();

        cb_push_back(cb_mean_squared, 1);

        /*
         * E[x**2] - E[x]**2
         */
        unpack_reconfig_data_format(cb_stats_reduced, cb_mean_squared);
        pack_reconfig_data_format(cb_var);
        sub_tiles_init();

        cb_reserve_back(cb_var, onetile);
        cb_wait_front(cb_mean_squared, 1);
        ACQ();
        sub_tiles(cb_stats_reduced, cb_mean_squared, 0, 0, 0);
        pack_tile(0, cb_var);
        REL();
        cb_push_back(cb_var, 1);
        cb_pop_front(cb_mean_squared, 1);

        /*
         * x - E[x]
         */
        unpack_reconfig_data_format(cb_inp, cb_stats_reduced);
        pack_reconfig_data_format(cb_x_minus_mean);
        sub_tiles_init();
        for (uint32_t wt = 0; wt < Wt; wt += blk) {
            cb_wait_front(cb_inp, blk);
            cb_reserve_back(cb_x_minus_mean, blk);
            ACQ();
            for (uint32_t wtr = 0; wtr<blk; wtr++) {
                sub_tiles(cb_inp, cb_stats_reduced, wtr, 1, wtr);
                pack_tile(wtr, cb_x_minus_mean);
            }
            REL();
            cb_push_back(cb_x_minus_mean, blk);
            cb_pop_front(cb_inp, blk);
        }
        #endif

        // free up CBs
        cb_pop_front(cb_stats_reduced, stats_tile_stride);

        /*
         * 1/sqrt(var + eps)
         */
        cb_wait_front(cb_var, 1);
        cb_reserve_back(cb_recip_sqrt_var, 1);
        unpack_reconfig_data_format(cb_var, cb_eps);
        pack_reconfig_data_format(cb_recip_sqrt_var);

        add_tiles_init();
        ACQ();
        add_tiles(cb_var, cb_eps, 0, 0, 0);
        sqrt_tile_init();
        sqrt_tile(0);
        recip_tile_init();
        recip_tile(0);
        pack_tile(0, cb_recip_sqrt_var);
        REL();
        cb_push_back(cb_recip_sqrt_var, 1);
        cb_pop_front(cb_var, 1);

        /*
         * norm x
         * Layernorm: (X - E[X]) * 1/sqrt(Var(X) + eps)
         * RMSNorm: X * 1/sqrt(E[X**2] + eps)
         */

        unpack_reconfig_data_format(cb_norm_x_input, cb_recip_sqrt_var);
        pack_reconfig_data_format(cb_x_normed);
        mul_bcast_cols_init_short();
        cb_wait_front(cb_recip_sqrt_var, 1);
        for (uint32_t wt = 0; wt < Wt; wt += blk) {
            cb_wait_front(cb_norm_x_input, blk);
            cb_reserve_back(cb_x_normed, blk);
            ACQ();
            for (uint32_t wtr = 0; wtr < blk; wtr++) {
                mul_tiles_bcast_cols(cb_norm_x_input, cb_recip_sqrt_var, wtr, 0, wtr);
                pack_tile(wtr, cb_x_normed);
            }
            REL();
            cb_push_back(cb_x_normed, blk);
            cb_pop_front(cb_norm_x_input, blk);
        }
        cb_pop_front(cb_recip_sqrt_var, 1);


        /*
         * x_normed * gamma
         */
        unpack_reconfig_data_format(cb_x_normed, cb_gamma);
        pack_reconfig_data_format(cb_times_gamma_out);
        cb_wait_front(cb_gamma, Wt);
        mul_bcast_rows_init_short();
        for (uint32_t wt = 0; wt < Wt; wt += blk) {
            cb_wait_front(cb_x_normed, blk);
            cb_reserve_back(cb_times_gamma_out, blk);
            ACQ();
            for (uint32_t wtr = 0; wtr < blk; wtr++) {
                mul_tiles_bcast_rows(cb_x_normed, cb_gamma, wtr, wt+wtr, wtr);
                pack_tile(wtr, cb_times_gamma_out);
            }
            REL();
            cb_push_back(cb_times_gamma_out, blk);
            cb_pop_front(cb_x_normed, blk);
        }

        if constexpr(do_gamma and do_beta) {
            /*
            * x_normed * gamma + beta
            */
            unpack_reconfig_data_format(cb_times_gamma_out, cb_beta);
            pack_reconfig_data_format(cb_out);
            cb_wait_front(cb_beta, Wt);
            add_bcast_rows_init_short();
            for (uint32_t wt = 0; wt < Wt; wt += blk) {
                cb_wait_front(cb_times_gamma_out, blk);
                cb_reserve_back(cb_out, blk);
                ACQ();
                for (uint32_t wtr = 0; wtr < blk; wtr++) {
                    add_tiles_bcast_rows(cb_times_gamma_out, cb_beta, wtr, wt+wtr, wtr);
                    pack_tile(wtr, cb_out);
                }
                REL();
                cb_push_back(cb_out, blk);
                cb_pop_front(cb_times_gamma_out, blk);
            }
        }

    }
    cb_pop_front(cb_eps, 1);
    cb_pop_front(cb_reduce, 1);
    cb_pop_front(cb_gamma, Wt);
    if constexpr(do_beta) {
        cb_pop_front(cb_beta, Wt);
    }





        // //////// BELOW NOT MINE ////////
        // //////// BELOW NOT MINE ////////
        // //////// BELOW NOT MINE ////////
        // //////// BELOW NOT MINE ////////
        // //////// BELOW NOT MINE ////////
        // //////// BELOW NOT MINE ////////
        // //////// BELOW NOT MINE ////////
        // //////// BELOW NOT MINE ////////
        // //////// BELOW NOT MINE ////////


        // /*
        //  * x - E[x]
        //  * compute xmm=x-mean. Reuse cb_x since we didn't pop anything from it
        //  */
        // if constexpr (FLOAT32_DTYPE) {
        //     unpack_reconfig_data_format(cb_x, cb_ex);
        // }
        // cb_wait_front(cb_ex, 1); // should have 1 tile
        // cb_reserve_back(cb_xmm, Wt);
        // sub_bcast_cols_init_short();
        // for (uint32_t wt = 0; wt < Wt; wt += blk) {
        //     ACQ();
        //     for (uint32_t wtr = 0; wtr<blk; wtr++) {
        //         sub_tiles_bcast_cols(cb_x, cb_ex, wt+wtr, 0, wtr); // tile *= 1/(sum(exp(x)))
        //         pack_tile(wtr, cb_xmm);
        //     }
        //     cb_push_back(cb_xmm, blk);
        //     REL();
        // }
        // cb_pop_front(cb_ex, 1);
        // cb_pop_front(cb_x, Wt);

        // #ifndef FUSE_PRE_ADD
        // unpack_reconfig_data_format_srca(cb_x, cb_xmm);
        // #endif
        // #endif

        // /* (x - E[x])^2
        //  * compute temp = xmm*xmm = (x-E[x])^2
        //  */
        // mul_tiles_init();
        // for (uint32_t wt = 0; wt < Wt; wt += blk) {
        //     cb_wait_front(cb_xmm, wt+blk); // cumulative wait
        //     cb_reserve_back(cb_xmm2, blk); // can probably use less space for this if we block
        //     ACQ();
        //     for (uint32_t wtr = 0; wtr<blk; wtr++) {
        //         mul_tiles(cb_xmm, cb_xmm, wt+wtr, wt+wtr, wtr);
        //         //mul_tiles(cb_xmm, cb_col1, wt+wtr, wt+wtr, wtr);
        //         pack_tile(wtr, cb_xmm2);
        //     }
        //     cb_push_back(cb_xmm2, blk);
        //     REL();
        // }

        // #if defined RMSNORM and not defined FUSED_PRE_ADD
        // unpack_reconfig_data_format(cb_xmm, cb_xmm2, cb_xmm, cb_scaler);
        // #endif

        // /* Var(x)
        //  * compute E[(x-E[x])^2]
        //  * IIRC E[x^2] - E[x]^2 trick was unstable
        //  * TODO(AP): can save space here by reusing CB
        //  */
        // if constexpr (FLOAT32_DTYPE) {
        //     unpack_reconfig_data_format(cb_xmm2, cb_scaler);
        // }
        // cb_reserve_back(cb_ex2, 1);
        // reduce_init_delta<false>(REDUCE_OP, REDUCE_DIM);
        // ACQ();
        // cb_wait_front(cb_xmm2, Wt);
        // //cb_wait_front(cb_xmm, Wt);
        // for (uint32_t wt = 0; wt < Wt; wt += blk) {
        //     // reduce
        //     for (uint32_t wtr = 0; wtr<blk; wtr++)
        //         reduce_tile(cb_xmm2, cb_scaler, wt+wtr, scaler0, dst0);
        //         //reduce_tile(cb_xmm, cb_scaler, wt+wtr, scaler0, dst0);
        // }
        // cb_pop_front(cb_xmm2, Wt);
        // pack_tile(dst0, cb_ex2);
        // reduce_revert_delta();
        // REL();

        // cb_push_back(cb_ex2, 1);
        // cb_wait_front(cb_ex2, 1);

        // /* Var(x) + eps
        //  * add epsilon E[(x-E[x])^2]+eps
        //  */
        // if constexpr (FLOAT32_DTYPE) {
        //     unpack_reconfig_data_format(cb_ex2, cb_eps);
        // }
        // ACQ();
        // add_tiles_init();
        // add_tiles(cb_ex2, cb_eps, 0, 0, dst0);

        // cb_reserve_back(cb_ex2pe, 1); // 1
        // sqrt_tile_init();
        // sqrt_tile(dst0);
        // recip_tile_init();
        // recip_tile(dst0);
        // pack_tile(dst0, cb_ex2pe);
        // cb_push_back(cb_ex2pe, 1);
        // REL();
        // cb_pop_front(cb_ex2, 1);

        // /* ln(x) * gamma + beta (gamma and beta are optional)
        //  * now xmm = (x-E[x])
        //  * we have 1.0/sqrt( E[(x-E[x])^2] + eps) in cb_ex2pe
        //  * just need to bcast_mul xmm with cb_ex2pe
        //  */
        // cb_wait_front(cb_ex2pe, 1);
        // for (uint32_t wt = 0; wt < Wt; wt += blk) {
        //                 //if (ht == 1) UNPACK(( DPRINT << "wt_2=" << wt << " " ));
        //                 //if (ht == 1) UNPACK(( DPRINT << "rem_2=" << rem << ENDL() ));
        //     unpack_reconfig_data_format(cb_xmm, cb_ex2pe);
        //     if constexpr(do_gamma == 0 && do_beta == 0) {
        //         pack_reconfig_data_format(cb_out);
        //     } else {
        //         pack_reconfig_data_format(cb_fusion);
        //     }
        //     cb_reserve_back(cb_im_or_out, blk);
        //     #if defined RMSNORM and not defined FUSE_PRE_ADD
        //     unpack_reconfig_data_format_srca(cb_fusion, cb_xmm);
        //     #endif
        //     ACQ();
        //     mul_bcast_cols_init_short();
        //     for (uint32_t wtr = 0; wtr < blk; wtr++) {
        //         // cb_xmm[wt+wtr] since we pop Wt from cb_xmm after the entire loop
        //         mul_tiles_bcast_cols(cb_xmm, cb_ex2pe, wt+wtr, 0, wtr); // tile *= 1/(sum(exp(x)))
        //         pack_tile(wtr, cb_im_or_out); // pack either to intermediate (cb_fusion or out0)
        //     }
        //     cb_push_back(cb_im_or_out, blk); // if no gamma/beta are provided, this will be passed on to the writer
        //     REL();

        //     if constexpr(!(do_gamma == 0 && do_beta == 0)) {
        //         #if defined RMSNORM and not defined FUSE_PRE_ADD
        //         unpack_reconfig_data_format_srca(cb_xmm, cb_fusion);
        //         #endif
        //     }
        //     if constexpr (do_gamma) {
        //         if constexpr(do_beta == 0) {
        //             pack_reconfig_data_format(cb_out);
        //         }
        //         unpack_reconfig_data_format_srcb(cb_ex2pe, cb_gamma);
        //         ACQ();
        //         uint32_t cb_outg = do_beta ? cb_fusion : cb_out;
        //         mul_bcast_rows_init_short();
        //         cb_reserve_back(cb_outg, blk);
        //         cb_wait_front(cb_gamma, wt+blk); // we don't pop, TODO: only wait on first ht
        //         cb_wait_front(cb_fusion, blk);
        //         for (uint32_t wtr = 0; wtr < blk; wtr++) {
        //             mul_tiles_bcast_rows(cb_fusion, cb_gamma, wtr, wt+wtr, wtr); // tile *= 1/(sum(exp(x)))
        //             pack_tile(wtr, cb_outg); // pack either to intermediate (cb_fusion or out0)
        //         }
        //         cb_pop_front(cb_fusion, blk);
        //         // we don't pop gamma
        //         cb_push_back(cb_outg, blk);
        //         // We don't pop gamma since it's 1,1,1,Wt and we reuse it for all NCHt
        //         REL();
        //     }
        //     if constexpr (do_beta) {
        //         pack_reconfig_data_format(cb_out);
        //         if constexpr(do_gamma) {
        //             unpack_reconfig_data_format_srcb(cb_gamma, cb_beta);
        //         } else {
        //             unpack_reconfig_data_format_srcb(cb_ex2pe, cb_beta);
        //         }
        //         ACQ();
        //         add_bcast_rows_init_short();
        //         cb_reserve_back(cb_out, blk);
        //         cb_wait_front(cb_beta, wt+blk); // TODO: optimization - only wait on first ht
        //         cb_wait_front(cb_fusion, blk);
        //         for (uint32_t wtr = 0; wtr < blk; wtr++) {
        //             add_tiles_bcast_rows(cb_fusion, cb_beta, wtr, wt+wtr, wtr); // tile *= 1/(sum(exp(x)))
        //             pack_tile(wtr, cb_out); // pack either to intermediate (cb_fusion or out0)
        //         }
        //         cb_pop_front(cb_fusion, blk);
        //         // We don't pop beta since it's 1,1,1,Wt and we reuse it for all NCHt
        //         cb_push_back(cb_out, blk);
        //         REL();
        //     }
        // }
        // cb_pop_front(cb_ex2pe, 1);
        // cb_pop_front(cb_xmm, Wt);

    // } // NCHt loop
    //cb_pop_front(cb_scaler, 1); // optional for correctness
    //cb_pop_front(cb_eps, 1); // optional for correctness
    //cb_pop_front(cb_col1, 1); // optional for correctness
}
}
